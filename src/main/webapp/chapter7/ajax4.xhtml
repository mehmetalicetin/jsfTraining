<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui"
      xmlns:c="http://java.sun.com/jsp/jstl/core">
<f:view>
    <h:head>
        <meta charset="utf-8"/>
        <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <title>Ajax4</title>
    </h:head>
    <h:body>
        <!-- From this example, you may misunderstand that resetValues works
as a clear (empty) field's action. Well, it does not! When an input field
is reset, the valid value that replaces the invalid one is related to the
managed bean (the renderer will pick up the value from the bean). If
the managed bean is in the request scope, the replacer (valid value)
will be the one used for initialization of corresponding property (which
may be anything, not just an empty string). But, if the managed bean
is in view scope, then the replacer will be the currently valid value of
the corresponding property, which may be the initialization value, or
the previous valid value inserted by the user (of course, altered or not
altered in a server-side method).-->
        <h:form>
            <h:message id="msgId" showDetail="true" for="nameId" style="color: red;"/>
            <h:inputText id="nameId" value="#{ajaxBean.name}" validator="#{nameValidator.validate}"/>
            <h:commandButton value="Submit">
                <f:ajax execute="@form" resetValues="true" listener="#{ajaxBean.upperCaseName()}" render="nameId msgId"/>
            </h:commandButton>
        </h:form>
    </h:body>
</f:view>
</html>